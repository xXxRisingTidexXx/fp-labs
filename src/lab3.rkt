#lang racket
(define (solve-neuton x)
  ; Метод Ньютона повертає корінь в залежності від початкової точки.
  (if
   ; І якщо ітераційна процедура виходить за область визначення ...
   (<= x -1)
   ; ... то результату немає.
   +nan.0
   ; Однак, допоки значення функції в точці можна обрахувати ...
   (let
      ((f (- (sqr x) (log (+ x 1)) 3)))
    (if
     ; ... то при достатньому наближенні до 0 ...
     (< (abs f) 1e-9)
     ; ... один з коренів буде отриманий.
     x
     ; А поки рішення не зійшлося, обраховуємо похідну й оновлюємо абсцису дотику.
     (solve-neuton (- x (/ f (- (* 2 x) (/ 1 (+ x 1))))))))))

(define (integrate-symbol)
  ; Дана первісна була виведена аналітично з підінтегрального виразу.
  (define (integrate x)
    (* (/ x 2) (sqrt (+ (sqr x) 1))))
  ; За формулою Ньютона-Лейбніца знаходимо площу під кривою.
  (- (integrate 1.6) (integrate 0.5)))

(define (integrate-trapezoid n)
  ; Дана рекурсія обраховує суму площ трапецій, допоки не перебере їх усі.
  (define (integrate xi0 xi1 xn sum)
    (if
     ; Якщо "ліва" основа трапеції достатньо порівнялася з кінцем проміжку ...
     (<= (abs (- xn xi0)) 1e-6)
     ; ... то накопичену суму можна вважати розв'язком.
     sum
     ; Інакше ж продовжуємо ходу.
     (integrate
      ; "Права" основа трапеції буде "лівою".
      xi1
      ; До неї ж додамо крок інтегрування, це буде нова "права" основа.
      (- (* 2 xi1) xi0)
      ; Незмінною залишається межа
      xn
      ; А сума збільшується на площу поточної трапеції. Її висота - різниця абсцис, середня
      ; лінія - півсума ординат, а площа - добуток цих виразів.
      (+ sum (* (- xi1 xi0) (/ (+ (estimate xi0) (estimate xi1)) 2))))))
  ; Задаємо формулу підінтегрального виразу.
  (define (estimate x)
    (/ (+ (sqr x) 0.5) (sqrt (+ (sqr x) 1))))
  ; Вказуємо нижню й верхню межу інтегрування.
  (let
      ((a 0.5)
       (b 1.6))
    ; На початку визначаємо крок h i нульову суму.
    (integrate a (+ a (/ (- b a) n)) b 0)))